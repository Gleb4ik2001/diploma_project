# Generated by Django 4.2.7 on 2023-12-16 12:02

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=254, unique=True, validators=[django.core.validators.EmailValidator('Введите корректный адрес электронной почты.')], verbose_name='почта')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='logos/', validators=[django.core.validators.FileExtensionValidator(['PNG', 'JPEG', 'GIF', 'RAW', 'TIFF', 'BMP', 'PSD', 'JPG'], 'Формат загруженного файла не поддерживается')], verbose_name='фото/логотип')),
                ('role', models.CharField(choices=[('JOBSEEKER', 'Jobseeker'), ('COMPANY', 'Company'), ('ADMIN', 'Admin')], max_length=30, verbose_name='роль')),
                ('is_active', models.BooleanField(default=True, verbose_name='статус активности')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='статус администратора')),
                ('is_staff', models.BooleanField(default=False, verbose_name='статус работника')),
                ('datetime_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='дата регистрации')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'пользователь',
                'verbose_name_plural': 'пользователи',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('customuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('company_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='название компании')),
            ],
            options={
                'verbose_name': 'компания',
                'verbose_name_plural': 'компания',
                'ordering': ('-id',),
            },
            bases=('auths.customuser',),
            managers=[
                ('companys', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='JobSeeker',
            fields=[
                ('customuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('first_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='имя')),
                ('last_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='фамилия')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='дата рождения')),
            ],
            options={
                'verbose_name': 'соискатель',
                'verbose_name_plural': 'соискатели',
                'ordering': ('-id',),
            },
            bases=('auths.customuser',),
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
            ],
            options={
                'verbose_name': 'администратор',
                'verbose_name_plural': 'администраторы',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('auths.customuser',),
            managers=[
                ('admins', django.db.models.manager.Manager()),
            ],
        ),
    ]
